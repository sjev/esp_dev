{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"General After multiple projects on multiple platforms I tend to make a mess and forget what I was working on. This documentation is an attempt to write down some notes and avoid wasting time in the future. There are two ways of programming : Micropython ESPHome Directory structure \u251c\u2500\u2500 doc # documentation \u251c\u2500\u2500 esp32 # esp 32 platform files \u2502 \u251c\u2500\u2500 firmware # micropython binaries and flashing tool \u2502 \u2514\u2500\u2500 nodeMCU # specific platform \u251c\u2500\u2500 esp8266 # wemos and sonoff devices \u251c\u2500\u2500 esphome # easy integration with HomeAssistant \u2514\u2500\u2500 README.md Flashing firmware cd into corresponding firmware directory and run flash_xxx /dev/ttyUSBX script updated firmware can be downloaded from micropython site Python environment A virtual environment should be used to separate tooling from the system python envrionment. Create a virtual environment python3 -m venv venv Activate it source venv/bin/activate Install required packages pip instal -r requirements.txt Development tools Ampy Ampy from adafruit is a handy tool. Tip add export AMPY_PORT=\"/dev/ttyUSB0\" to .bashrc file, so you don't have to specify the port each time you run ampy Rshell Remote MicroPython shell . This is a simple shell which runs on the host and uses MicroPython's raw-REPL to send python snippets to the pyboard in order to get filesystem information, and to copy files to and from MicroPython's filesystem. Visual studio code Can be used with pymakr extension. settings for VSC: { \"address\": \"/dev/ttyUSB0\", \"username\": \"micro\", \"password\": \"python\", \"sync_folder\": \"\", \"open_on_start\": false, \"safe_boot_on_upload\": false, \"py_ignore\": [ \"pymakr.conf\", \".vscode\", \".gitignore\", \".git\", \"project.pymakr\", \"env\", \"venv\" ], \"fast_upload\": false, \"sync_file_types\": \"py,txt,log,json,xml,html,js,css,mpy\", \"ctrl_c_on_connect\": false, \"sync_all_file_types\": false, \"auto_connect\": false, \"autoconnect_comport_manufacturers\": [ \"Pycom\", \"Pycom Ltd.\", \"FTDI\", \"Microsoft\", \"Microchip Technology, Inc.\", \"QinHeng Electronics HL-340 USB-Serial adapter\" ] } Note A correct manufacturer code needs to be added to autoconnect_comport_manufacturers . (use lsusb ) Setting up VS Code see using stubs","title":"General"},{"location":"#general","text":"After multiple projects on multiple platforms I tend to make a mess and forget what I was working on. This documentation is an attempt to write down some notes and avoid wasting time in the future. There are two ways of programming : Micropython ESPHome","title":"General"},{"location":"#directory-structure","text":"\u251c\u2500\u2500 doc # documentation \u251c\u2500\u2500 esp32 # esp 32 platform files \u2502 \u251c\u2500\u2500 firmware # micropython binaries and flashing tool \u2502 \u2514\u2500\u2500 nodeMCU # specific platform \u251c\u2500\u2500 esp8266 # wemos and sonoff devices \u251c\u2500\u2500 esphome # easy integration with HomeAssistant \u2514\u2500\u2500 README.md","title":"Directory structure"},{"location":"#flashing-firmware","text":"cd into corresponding firmware directory and run flash_xxx /dev/ttyUSBX script updated firmware can be downloaded from micropython site","title":"Flashing firmware"},{"location":"#python-environment","text":"A virtual environment should be used to separate tooling from the system python envrionment. Create a virtual environment python3 -m venv venv Activate it source venv/bin/activate Install required packages pip instal -r requirements.txt","title":"Python environment"},{"location":"#development-tools","text":"","title":"Development tools"},{"location":"#ampy","text":"Ampy from adafruit is a handy tool. Tip add export AMPY_PORT=\"/dev/ttyUSB0\" to .bashrc file, so you don't have to specify the port each time you run ampy","title":"Ampy"},{"location":"#rshell","text":"Remote MicroPython shell . This is a simple shell which runs on the host and uses MicroPython's raw-REPL to send python snippets to the pyboard in order to get filesystem information, and to copy files to and from MicroPython's filesystem.","title":"Rshell"},{"location":"#visual-studio-code","text":"Can be used with pymakr extension. settings for VSC: { \"address\": \"/dev/ttyUSB0\", \"username\": \"micro\", \"password\": \"python\", \"sync_folder\": \"\", \"open_on_start\": false, \"safe_boot_on_upload\": false, \"py_ignore\": [ \"pymakr.conf\", \".vscode\", \".gitignore\", \".git\", \"project.pymakr\", \"env\", \"venv\" ], \"fast_upload\": false, \"sync_file_types\": \"py,txt,log,json,xml,html,js,css,mpy\", \"ctrl_c_on_connect\": false, \"sync_all_file_types\": false, \"auto_connect\": false, \"autoconnect_comport_manufacturers\": [ \"Pycom\", \"Pycom Ltd.\", \"FTDI\", \"Microsoft\", \"Microchip Technology, Inc.\", \"QinHeng Electronics HL-340 USB-Serial adapter\" ] } Note A correct manufacturer code needs to be added to autoconnect_comport_manufacturers . (use lsusb )","title":"Visual studio code"},{"location":"#setting-up-vs-code","text":"see using stubs","title":"Setting up VS Code"},{"location":"experiments/","text":"Experiments Stepper motor Motor: 28BYJ-48 Driver: uln2003 Code location: /esp32/nodeMCU/stepper.py see also jangeox blog for in detail explanation and torque measurementes. Takeaways: only half stepping works delays lower than 900us ar too short (motor does not move) Load cell Hardware : 10 kg loadcell with HX711 amplifier. The board was patched to work on 3.3V. Code location : /esp/nodeMCU/load_cell.py driver from here Load Cell - ESPHome Why write custom glue, when just the right code is already available! A version of scales measurement was built in /esphome folder. to run locally - esphome scale.yaml run added to home assistant by uploading the yaml file via file manager.","title":"Experiments"},{"location":"experiments/#experiments","text":"","title":"Experiments"},{"location":"experiments/#stepper-motor","text":"Motor: 28BYJ-48 Driver: uln2003 Code location: /esp32/nodeMCU/stepper.py see also jangeox blog for in detail explanation and torque measurementes. Takeaways: only half stepping works delays lower than 900us ar too short (motor does not move)","title":"Stepper motor"},{"location":"experiments/#load-cell","text":"Hardware : 10 kg loadcell with HX711 amplifier. The board was patched to work on 3.3V. Code location : /esp/nodeMCU/load_cell.py driver from here","title":"Load cell"},{"location":"experiments/#load-cell-esphome","text":"Why write custom glue, when just the right code is already available! A version of scales measurement was built in /esphome folder. to run locally - esphome scale.yaml run added to home assistant by uploading the yaml file via file manager.","title":"Load Cell - ESPHome"},{"location":"platforms/","text":"NodeMCU for extensive pinout documentations see pinout reference Wemos D1 ESP8266 based board. full docs","title":"Platforms"},{"location":"platforms/#nodemcu","text":"for extensive pinout documentations see pinout reference","title":"NodeMCU"},{"location":"platforms/#wemos-d1","text":"ESP8266 based board. full docs","title":"Wemos D1"}]}