{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"General After multiple projects on multiple platforms I tend to make a mess and forget what I was working on. This documentation is an attempt to write down some notes and avoid wasting time in the future. Directory structure \u251c\u2500\u2500 doc # documentation \u251c\u2500\u2500 esp32 # esp 32 platform files \u2502 \u251c\u2500\u2500 firmware # micropython binaries and flashing tool \u2502 \u2514\u2500\u2500 nodeMCU # specific platform \u2514\u2500\u2500 README.md Flashing firmware cd into corresponding firmware directory and run flash_xxx /dev/ttyUSBX script updated firmware can be downloaded from micropython site Python environment A virtual environment should be used to separate tooling from the system python envrionment. Create a virtual environment python3 -m venv venv Activate it source venv/bin/activate Install required packages pip instal -r requirements.txt Managing files Ampy Ampy from adafruit is a handy tool. Tip add export AMPY_PORT=\"/dev/ttyUSB0\" to .bashrc file, so you don't have to specify the port each time you run ampy","title":"General"},{"location":"#general","text":"After multiple projects on multiple platforms I tend to make a mess and forget what I was working on. This documentation is an attempt to write down some notes and avoid wasting time in the future.","title":"General"},{"location":"#directory-structure","text":"\u251c\u2500\u2500 doc # documentation \u251c\u2500\u2500 esp32 # esp 32 platform files \u2502 \u251c\u2500\u2500 firmware # micropython binaries and flashing tool \u2502 \u2514\u2500\u2500 nodeMCU # specific platform \u2514\u2500\u2500 README.md","title":"Directory structure"},{"location":"#flashing-firmware","text":"cd into corresponding firmware directory and run flash_xxx /dev/ttyUSBX script updated firmware can be downloaded from micropython site","title":"Flashing firmware"},{"location":"#python-environment","text":"A virtual environment should be used to separate tooling from the system python envrionment. Create a virtual environment python3 -m venv venv Activate it source venv/bin/activate Install required packages pip instal -r requirements.txt","title":"Python environment"},{"location":"#managing-files","text":"","title":"Managing files"},{"location":"#ampy","text":"Ampy from adafruit is a handy tool. Tip add export AMPY_PORT=\"/dev/ttyUSB0\" to .bashrc file, so you don't have to specify the port each time you run ampy","title":"Ampy"},{"location":"experiments/","text":"Experiments Stepper motor Motor: 28BYJ-48 Driver: uln2003 Code location: /esp32/nodeMCU/stepper.py see also jangeox blog for in detail explanation and torque measurementes. Takeaways: only half stepping works delays lower than 900us ar too short (motor does not move)","title":"Experiments"},{"location":"experiments/#experiments","text":"","title":"Experiments"},{"location":"experiments/#stepper-motor","text":"Motor: 28BYJ-48 Driver: uln2003 Code location: /esp32/nodeMCU/stepper.py see also jangeox blog for in detail explanation and torque measurementes. Takeaways: only half stepping works delays lower than 900us ar too short (motor does not move)","title":"Stepper motor"},{"location":"nodemcu/","text":"NodeMCU for extensive pinout documentations see pinout reference","title":"Nodemcu"},{"location":"nodemcu/#nodemcu","text":"for extensive pinout documentations see pinout reference","title":"NodeMCU"}]}